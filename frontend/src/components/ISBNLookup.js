import { useState } from "react";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from "@/components/ui/select";\nimport { Label } from "@/components/ui/label";\nimport { Search, BookOpen, AlertCircle, CheckCircle, Loader2 } from "lucide-react";\nimport axios from "axios";\nimport { toast } from "sonner";\n\nconst BACKEND_URL = process.env.REACT_APP_BACKEND_URL;\nconst API = `${BACKEND_URL}/api`;\n\nconst ISBNLookup = ({ placards = [], shelves = [], onSuccess }) => {\n  const [isbn, setIsbn] = useState("");\n  const [bookInfo, setBookInfo] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [selectedPlacard, setSelectedPlacard] = useState("");\n  const [selectedShelf, setSelectedShelf] = useState("");\n  const [error, setError] = useState(null);\n  const [adding, setAdding] = useState(false);\n\n  // Nettoyer l'ISBN (retirer les tirets et espaces)\n  const cleanISBN = (isbn) => {\n    return isbn.replace(/[^0-9X]/g, '');\n  };\n\n  // Rechercher les informations du livre par ISBN\n  const handleSearch = async () => {\n    const cleanedISBN = cleanISBN(isbn);\n    if (!cleanedISBN || cleanedISBN.length < 10) {\n      toast.error("Veuillez entrer un ISBN valide (10 ou 13 chiffres)");\n      return;\n    }\n\n    try {\n      setLoading(true);\n      setError(null);\n      setBookInfo(null);\n\n      const response = await axios.get(`${API}/isbn/${cleanedISBN}`);\n      setBookInfo(response.data);\n      toast.success(`Livre trouvé via ${response.data.source} !`);\n    } catch (error) {\n      console.error("Erreur lors de la recherche ISBN:", error);\n      setError("Aucune information trouvée pour cet ISBN");\n      toast.error("Aucune information trouvée pour cet ISBN");\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Ajouter le livre à la bibliothèque\n  const handleAddBook = async () => {\n    if (!selectedPlacard || !selectedShelf) {\n      toast.error("Veuillez sélectionner un placard et une étagère");\n      return;\n    }\n\n    try {\n      setAdding(true);\n      \n      const response = await axios.post(\n        `${API}/books/from-isbn/${cleanISBN(isbn)}?placard=${selectedPlacard}&shelf=${selectedShelf}`\n      );\n      \n      toast.success("Livre ajouté avec succès à la bibliothèque !");\n      onSuccess();\n    } catch (error) {\n      console.error("Erreur lors de l'ajout:", error);\n      toast.error("Erreur lors de l'ajout du livre");\n    } finally {\n      setAdding(false);\n    }\n  };\n\n  // Filtrer les étagères selon le placard sélectionné\n  const filteredShelves = shelves.filter(shelf => \n    selectedPlacard === "" || shelf.placard_name === selectedPlacard\n  );\n\n  // Réinitialiser la recherche\n  const handleReset = () => {\n    setIsbn("");\n    setBookInfo(null);\n    setError(null);\n    setSelectedPlacard("");\n    setSelectedShelf("");\n  };\n\n  return (\n    <div className="space-y-6">\n      {/* Recherche ISBN */}\n      <Card>\n        <CardHeader>\n          <CardTitle className="flex items-center">\n            <Search className="h-5 w-5 mr-2" />\n            Recherche par ISBN\n          </CardTitle>\n        </CardHeader>\n        <CardContent className="space-y-4">\n          <div className="flex space-x-2">\n            <div className="flex-1">\n              <Label htmlFor="isbn">ISBN</Label>\n              <Input\n                id="isbn"\n                value={isbn}\n                onChange={(e) => setIsbn(e.target.value)}\n                placeholder="Entrez l'ISBN (ex: 978-2-1234-5678-9)"\n                onKeyPress={(e) => e.key === 'Enter' && handleSearch()}\n              />\n            </div>\n            <div className="flex items-end">\n              <Button \n                onClick={handleSearch} \n                disabled={loading || !isbn.trim()}\n                className="h-10"\n              >\n                {loading ? (\n                  <Loader2 className="h-4 w-4 animate-spin mr-2" />\n                ) : (\n                  <Search className="h-4 w-4 mr-2" />\n                )}\n                {loading ? "Recherche..." : "Rechercher"}\n              </Button>\n            </div>\n          </div>\n\n          <p className="text-sm text-gray-500">\n            La recherche utilise automatiquement Google Books et Open Library\n          </p>\n        </CardContent>\n      </Card>\n\n      {/* Erreur */}\n      {error && (\n        <Card className="border-red-200 bg-red-50">\n          <CardContent className="pt-6">\n            <div className="flex items-center text-red-800">\n              <AlertCircle className="h-5 w-5 mr-2" />\n              <span>{error}</span>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Informations du livre trouvé */}\n      {bookInfo && (\n        <Card className="border-green-200 bg-green-50">\n          <CardHeader>\n            <CardTitle className="flex items-center text-green-800">\n              <CheckCircle className="h-5 w-5 mr-2" />\n              Livre trouvé !\n            </CardTitle>\n          </CardHeader>\n          <CardContent className="space-y-4">\n            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">\n              {/* Image de couverture */}\n              {bookInfo.thumbnail && (\n                <div className="md:col-span-2 flex justify-center">\n                  <img \n                    src={bookInfo.thumbnail} \n                    alt={bookInfo.title}\n                    className="max-h-48 object-contain rounded-md shadow-sm"\n                  />\n                </div>\n              )}\n\n              {/* Informations principales */}\n              <div className="space-y-2">\n                <div>\n                  <Label className="text-gray-600">Titre</Label>\n                  <p className="font-semibold">{bookInfo.title || 'Non spécifié'}</p>\n                </div>\n\n                <div>\n                  <Label className="text-gray-600">Auteur(s)</Label>\n                  <p>{bookInfo.authors?.join(', ') || 'Non spécifié'}</p>\n                </div>\n\n                <div>\n                  <Label className="text-gray-600">Éditeur</Label>\n                  <p>{bookInfo.publisher || 'Non spécifié'}</p>\n                </div>\n              </div>\n\n              <div className="space-y-2">\n                <div>\n                  <Label className="text-gray-600">Date de publication</Label>\n                  <p>{bookInfo.publication_date || 'Non spécifiée'}</p>\n                </div>\n\n                <div>\n                  <Label className="text-gray-600">Nombre de pages</Label>\n                  <p>{bookInfo.page_count || 'Non spécifié'}</p>\n                </div>\n\n                <div>\n                  <Label className="text-gray-600">Langue</Label>\n                  <p>{bookInfo.language || 'Non spécifiée'}</p>\n                </div>\n              </div>\n\n              {/* Catégories */}\n              {bookInfo.categories?.length > 0 && (\n                <div className="md:col-span-2">\n                  <Label className="text-gray-600">Catégories</Label>\n                  <div className="flex flex-wrap gap-2 mt-1">\n                    {bookInfo.categories.map((category, index) => (\n                      <span \n                        key={index}\n                        className="px-2 py-1 bg-blue-100 text-blue-800 text-xs rounded-full"\n                      >\n                        {category}\n                      </span>\n                    ))}\n                  </div>\n                </div>\n              )}\n\n              {/* Description */}\n              {bookInfo.description && (\n                <div className="md:col-span-2">\n                  <Label className="text-gray-600">Description</Label>\n                  <p className="text-sm text-gray-700 mt-1 line-clamp-4">\n                    {bookInfo.description.length > 300 \n                      ? bookInfo.description.substring(0, 300) + '...' \n                      : bookInfo.description\n                    }\n                  </p>\n                </div>\n              )}\n            </div>\n\n            {/* Source de l'information */}\n            <div className="text-xs text-gray-500 border-t pt-2">\n              Informations provenant de : {bookInfo.source}\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Ajout à la bibliothèque */}\n      {bookInfo && (\n        <Card>\n          <CardHeader>\n            <CardTitle className="flex items-center">\n              <BookOpen className="h-5 w-5 mr-2" />\n              Ajouter à la bibliothèque\n            </CardTitle>\n          </CardHeader>\n          <CardContent className="space-y-4">\n            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">\n              {/* Sélection du placard */}\n              <div>\n                <Label htmlFor="placard">Placard *</Label>\n                <Select value={selectedPlacard} onValueChange={setSelectedPlacard}>\n                  <SelectTrigger>\n                    <SelectValue placeholder="Sélectionnez un placard" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {placards.map(placard => (\n                      <SelectItem key={placard.id} value={placard.name}>\n                        Placard {placard.name}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n\n              {/* Sélection de l'étagère */}\n              <div>\n                <Label htmlFor="shelf">Étagère *</Label>\n                <Select \n                  value={selectedShelf} \n                  onValueChange={setSelectedShelf}\n                  disabled={!selectedPlacard}\n                >\n                  <SelectTrigger>\n                    <SelectValue placeholder="Sélectionnez une étagère" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {filteredShelves.map(shelf => (\n                      <SelectItem key={shelf.id} value={shelf.name}>\n                        Étagère {shelf.name}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n            </div>\n\n            <div className="flex justify-end space-x-3">\n              <Button variant="outline" onClick={handleReset}>\n                Nouvelle recherche\n              </Button>\n              <Button \n                onClick={handleAddBook}\n                disabled={adding || !selectedPlacard || !selectedShelf}\n              >\n                {adding ? (\n                  <Loader2 className="h-4 w-4 animate-spin mr-2" />\n                ) : (\n                  <BookOpen className="h-4 w-4 mr-2" />\n                )}\n                {adding ? "Ajout..." : "Ajouter à la bibliothèque"}\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n};\n\nexport default ISBNLookup;